#Ruby 
 
class [%=out.startSync("=begin ", "=end", c.id, "name")%] [%=c.name%] [%=out.endSync()%]
  def initialize(name)
    @name = name
  end
  
	  # Generate setter and getter for all inports in [%=c.name%] class  	
	  [%for (inport in c.inPorts){%] 
	  def [%=inport.name%] 
	  	    [%=out.startSync("#", c.id, "RubyBehaviour")%]    			 
			
			[%=out.endSync()%]
	    @[%=inport.name%]
	  end
	  def [%=inport.name%]=([%=inport.name%])
	    	[%=out.startSync("#", c.id, "RubyBehaviour")%]    			 
			
		    [%=out.endSync()%]
	    @[%=inport.name%] = [%=inport.name%]
	  end
	  [%}%]
	  
	  # Generate setter and getter for all outports in [%=c.name%] class
	  [%for (outport in c.outPort){%] 
	  def [%=outport.name%] 
	  	    [%=out.startSync("#", c.id, "RubyBehaviour")%]    			 
			
			[%=out.endSync()%]
	    @[%=outport.name%]
	  end
	  def [%=outport.name%]=([%=outport.name%])
	    	[%=out.startSync("#", c.id, "RubyBehaviour")%]    			 
			
			[%=out.endSync()%]
	    @[%=outport.name%] = [%=outport.name%]
	  end
	  [%}%]
    def execute([%=c.inPorts.collect(p|p.type + " " + p.name).concat(", ")%])
		[%=out.startSync("#", c.id, "RubyBehaviour")%]    			 

		[%=out.endSync()%]
    end
end 